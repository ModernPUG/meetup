function BrainSocketPubSub(){this.subscriptions=[];this.forget=function(e){for(x=0;x<this.subscriptions.length;x++){if(this.subscriptions[x].name==e[0],this.subscriptions[x].callback==e[1])this.subscriptions.splice(x,1)}};this.listen=function(e,t){this.subscriptions.push({name:e,callback:t});return[e,t]};this.fire=function(e,t){var n=[];if(this.subscriptions.length>0){for(var r=0;r<this.subscriptions.length;r++){if(this.subscriptions[r].name==e)n.push({fn:this.subscriptions[r].callback})}for(r=0;r<n.length;r++){n[r].fn.apply(this,[t])}}}}function BrainSocket(e,t){this.connection=e;this.Event=t;this.connection.BrainSocket=this;this.connection.digestMessage=function(e){try{var t=JSON.parse(e);if(t.server&&t.server.event){this.BrainSocket.Event.fire(t.server.event,t)}else{this.BrainSocket.Event.fire(t.client.event,t)}}catch(n){this.BrainSocket.Event.fire(e)}};this.connection.onerror=function(e){console.log(e)};this.connection.onmessage=function(e){this.digestMessage(e.data)};this.success=function(e){this.message("app.success",e)};this.error=function(e){this.message("app.error",e)};this.message=function(e,t){var n={client:{}};n.client.event=e;if(!t){t=[]}n.client.data=t;this.connection.send(JSON.stringify(n))}}